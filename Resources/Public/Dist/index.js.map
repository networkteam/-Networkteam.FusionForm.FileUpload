{
  "version": 3,
  "sources": ["../../Private/Javascript/utils.ts", "../../Private/Javascript/validator/fileSize.ts", "../../Private/Javascript/validator/fileType.ts", "../../Private/Javascript/validator/file.ts", "../../Private/Javascript/fileUpload.ts", "../../Private/Javascript/plugin.ts"],
  "sourcesContent": ["export const formatFileSize = (bytes: number): string => {\n  if (bytes === 0) return '0 B';\n  const k = 1024;\n  const sizes = ['B', 'KB', 'MB', 'GB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n};\n\nexport const createThumbnailNode = (file: File): HTMLImageElement => {\n  const img = document.createElement('img');\n  img.src = URL.createObjectURL(file);\n  img.onload = () => URL.revokeObjectURL(img.src);\n  img.width = 100;\n\n  return img;\n};\n", "const validateFileSize = (file: File, maxFileSize: string): boolean => {\n  // If no maxFileSize string is provided, allow any file size\n  if (!maxFileSize) return true;\n\n  // Parse the maxFileSize string\n  const sizeRegex = /^(\\d+(\\.\\d+)?)\\s*(B|K|M|G|KB|MB|GB)?$/i;\n  const match = maxFileSize.match(sizeRegex);\n\n  if (!match) {\n    console.error('Invalid maxFileSize string:', maxFileSize);\n    return false;\n  }\n\n  const [, size, , unit = 'B'] = match;\n  const maxBytes =\n    parseFloat(size) *\n    ({\n      B: 1,\n      K: 1024,\n      M: 1024 * 1024,\n      G: 1024 * 1024 * 1024,\n      KB: 1024,\n      MB: 1024 * 1024,\n      GB: 1024 * 1024 * 1024,\n    }[unit.toUpperCase()] || 1);\n\n  return file.size <= maxBytes;\n};\n\nexport default validateFileSize;\n", "const validateFileType = (file: File, accept: string): boolean => {\n  // If no accept string is provided, allow all file types\n  if (!accept) return true;\n\n  const acceptedTypes = accept\n    .split(',')\n    .map((type) => type.trim().toLowerCase());\n\n  const fileMimeType = file.type.toLowerCase();\n  const fileExtension = file.name.split('.').pop()?.toLowerCase();\n\n  // Check if the file matches any of the accepted types\n  return acceptedTypes.some((type) => {\n    // Exact MIME type match\n    if (type === fileMimeType) return true;\n\n    // Wildcard MIME type match (e.g., \"image/*\")\n    if (type.endsWith('/*')) {\n      const [typeCategory] = type.split('/');\n      return fileMimeType.startsWith(`${typeCategory}/`);\n    }\n\n    // File extension match\n    if (type.startsWith('.') && type.slice(1) === fileExtension) return true;\n\n    return false;\n  });\n};\n\nexport default validateFileType;\n", "import validateFileSize from './fileSize';\nimport validateFileType from './fileType';\n\nexport const validateFile = (file: File, input: HTMLInputElement): boolean => {\n  const acceptedTypes = input.accept;\n  const maxFileSize = input.dataset.maxFileSize || '';\n  const maxUploadSize = input.dataset.maxUploadSize || '';\n\n  if (acceptedTypes && !validateFileType(file, acceptedTypes)) {\n    console.error(`File type ${file.type} is not allowed`);\n    return false;\n  }\n  if (maxFileSize && !validateFileSize(file, maxFileSize)) {\n    console.error(`File size exceeds the maximum limit of ${maxFileSize}`);\n    return false;\n  }\n\n  // TODO: Add logic here to check total upload size against maxUploadSize\n  return true;\n};\n", "import { createThumbnailNode, formatFileSize } from './utils';\nimport { validateFile } from './validator/file';\n\nclass FileUploadInput {\n  private input: HTMLInputElement;\n  private container: HTMLDivElement;\n  private fileList: HTMLDivElement;\n  private dataTransfer: DataTransfer;\n\n  constructor(input: HTMLInputElement, dropAreaSelector?: string) {\n    this.input = input;\n    this.dataTransfer = new DataTransfer();\n    this.setupInput();\n    if (dropAreaSelector) {\n      this.setupDropArea(dropAreaSelector);\n    }\n  }\n\n  // TODO: Add a way to customize the file container/list (at least get class names from a config object)\n  private setupInput() {\n    this.container = document.createElement('div');\n    this.container.className = 'file-upload-container';\n    this.input.parentNode?.insertBefore(this.container, this.input);\n    this.container.appendChild(this.input);\n\n    this.fileList = document.createElement('div');\n    this.fileList.className = 'file-list';\n    this.container.appendChild(this.fileList);\n\n    this.input.addEventListener('change', () => this.handleFiles());\n  }\n\n  private setupDropArea(dropAreaSelector: string) {\n    const dropArea = document.querySelector(dropAreaSelector);\n    if (!dropArea) {\n      console.error('Drop area selector provided but no element was found');\n      return;\n    }\n\n    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach((eventName) => {\n      dropArea.addEventListener(eventName, preventDefaults, false);\n    });\n\n    function preventDefaults(e: Event) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    ['dragenter', 'dragover'].forEach((eventName) => {\n      dropArea.addEventListener(eventName, () =>\n        dropArea.classList.add('highlight')\n      );\n    });\n\n    ['dragleave', 'drop'].forEach((eventName) => {\n      dropArea.addEventListener(eventName, () =>\n        dropArea.classList.remove('highlight')\n      );\n    });\n\n    dropArea.addEventListener('drop', (e: Event) => {\n      const dragEvent = e as DragEvent;\n      const files = dragEvent.dataTransfer?.files;\n      if (files) {\n        this.addFiles(Array.from(files));\n      }\n    });\n  }\n\n  private handleFiles() {\n    const newFiles = Array.from(this.input.files || []);\n    this.addFiles(newFiles);\n  }\n\n  private addFiles(files: File[]) {\n    files.forEach((file) => {\n      if (validateFile(file, this.input)) {\n        this.dataTransfer.items.add(file);\n        this.addFileToList(file);\n      } else {\n        console.error(`File ${file.name} is not valid`);\n        // TODO: Add user-friendly error message\n      }\n    });\n    this.updateInputFiles();\n  }\n\n  // TODO: Add a way to customize the file list item (at least get class names from a config object)\n  private addFileToList(file: File) {\n    const fileBloc = document.createElement('span');\n    fileBloc.className = 'file-block';\n\n    const fileName = document.createElement('span');\n    fileName.className = 'name';\n    fileName.textContent = file.name;\n\n    const fileSize = document.createElement('span');\n    fileSize.className = 'size';\n    fileSize.textContent = ` (${formatFileSize(file.size)})`;\n\n    const deleteButton = document.createElement('span');\n    deleteButton.className = 'file-delete';\n    deleteButton.innerHTML = '<span>Delete</span>';\n    deleteButton.onclick = () => this.removeFile(file.name, fileBloc);\n\n    fileBloc.appendChild(deleteButton);\n    fileBloc.appendChild(fileName);\n    fileBloc.appendChild(fileSize);\n\n    if (file.type.startsWith('image/')) {\n      const thumbnail = createThumbnailNode(file);\n      fileBloc.appendChild(thumbnail);\n    }\n\n    this.fileList.appendChild(fileBloc);\n  }\n\n  private removeFile(fileName: string, fileBloc: HTMLElement) {\n    fileBloc.remove();\n    for (let i = 0; i < this.dataTransfer.items.length; i++) {\n      if (this.dataTransfer.items[i].kind === 'file') {\n        const file = this.dataTransfer.items[i].getAsFile();\n        if (file && file.name === fileName) {\n          this.dataTransfer.items.remove(i);\n          break;\n        }\n      }\n    }\n    this.updateInputFiles();\n  }\n\n  private updateInputFiles() {\n    this.input.files = this.dataTransfer.files;\n  }\n}\n\nexport default FileUploadInput;\n", "import FileUploadInput from './fileUpload';\n\nclass FileUploadPlugin {\n  private selector: string;\n  private dropAreaSelector: string;\n  private inputs: FileUploadInput[] = [];\n\n  constructor(options: { selector: string; dropAreaSelector?: string }) {\n    this.selector = options.selector;\n    this.dropAreaSelector = options.dropAreaSelector || '';\n    this.init();\n  }\n\n  private init() {\n    const fileInputs = document.querySelectorAll<HTMLInputElement>(\n      this.selector\n    );\n    fileInputs.forEach((input) => {\n      this.inputs.push(new FileUploadInput(input, this.dropAreaSelector));\n    });\n  }\n}\n\ndeclare global {\n  interface Window {\n    FileUploadPlugin: typeof FileUploadPlugin;\n  }\n}\n\nwindow.FileUploadPlugin = FileUploadPlugin;\n"],
  "mappings": "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",
  "names": ["formatFileSize", "bytes", "k", "sizes", "createThumbnailNode", "file", "img", "validateFileSize", "file", "maxFileSize", "sizeRegex", "match", "size", "unit", "maxBytes", "fileSize_default", "validateFileType", "file", "accept", "acceptedTypes", "type", "fileMimeType", "fileExtension", "typeCategory", "fileType_default", "validateFile", "file", "input", "acceptedTypes", "maxFileSize", "maxUploadSize", "fileType_default", "fileSize_default", "FileUploadInput", "input", "dropAreaSelector", "dropArea", "eventName", "preventDefaults", "e", "files", "newFiles", "file", "validateFile", "fileBloc", "fileName", "fileSize", "formatFileSize", "deleteButton", "thumbnail", "createThumbnailNode", "fileUpload_default", "FileUploadPlugin", "options", "input", "fileUpload_default"]
}
